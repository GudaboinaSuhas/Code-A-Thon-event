import java.util.Scanner;
import java.util.Stack;

public class Solution {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int N = in.nextInt();
		int[] heights = new int[N + 1];
		for (int i = 0; i < N; i++) {
			heights[i] = in.nextInt();
		}

		long maxArea = 0;
		Stack<Integer> indices = new Stack<Integer>();
		for (int i = 0; i < heights.length; i++) {
			while (!indices.empty() && heights[i] <= heights[indices.peek()]) {
				int index = indices.pop();
				long area = (long) heights[index]
						* (i - (indices.empty() ? 0 : (indices.peek() + 1)));
				maxArea = Math.max(maxArea, area);
			}
			indices.push(i);
		}
		System.out.println(maxArea);

		in.close();
	}
}

-----------------------------------------------------------------
public int largestRectangleArea(int[] height) {
	if (height == null || height.length == 0) {
		return 0;
	}
 
	Stack<Integer> stack = new Stack<Integer>();
 
	int max = 0;
	int i = 0;
 
	while (i < height.length) {
		//push index to stack when the current height is larger than the previous one
		if (stack.isEmpty() || height[i] >= height[stack.peek()]) {
			stack.push(i);
			i++;
		} else {
		//calculate max value when the current height is less than the previous one
			int p = stack.pop();
			int h = height[p];
			int w = stack.isEmpty() ? i : i - stack.peek() - 1;
			max = Math.max(h * w, max);
		}
 
	}
 
	while (!stack.isEmpty()) {
		int p = stack.pop();
		int h = height[p];
		int w = stack.isEmpty() ? i : i - stack.peek() - 1;
		max = Math.max(h * w, max);
	}
 
	return max;
}
